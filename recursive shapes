/*
Copy and paste the code below into a new processing sketch
Complete the recursiveRect and recursiveEllipse methods. Each of the 
methods should use recursion to draw the shape 
on top of itself smaller and smaller so that it looks like the sample
in recursive_shapes.png

IF YOU ARE LOOKING FOR AN EXTRA CHALLENGE, MAKE A RECURSIVE TRIANGLE METHOD
*/

void setup(){
  size(500, 500);
}

void draw(){
  fill(#0000FF);
  recursiveRect(300, 25, 200, 200, 5);
  fill(#FF0000);
  recursiveEllipse(200, 400, 300, 200, 16);
  
  //BONUS
  recursiveTriangle(0, 0, 200, 0, 100, 173, 6);
}

void recursiveRect(int x, int y, int w, int h, int scale){
  //fill me out
}

void recursiveEllipse(int x, int y, int w, int h, int scale){
  //me too
}

//BONUS
void recursiveTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int scale){
  //Complete me if you dare!
}

void setup(){
  size(1500, 1500);
}

void draw(){
  fill(#0000FF);
  recursiveRect(300, 25, 200, 200, 5);
  //fill(#FF0000);
  recursiveEllipse(200, 400, 300, 200, 16);
  
  //BONUS
  recursiveTriangle(0, 0, 200, 0, 100, 173, 6);
}

void recursiveRect(int x, int y, int w, int h, int scale){
  if(scale<=0) {
    rect(0, 0, 0, 0, 0);
  }else if(scale>0) {
    rect(x-scale, y-scale, w/scale, h/scale);
    recursiveRect( x,  y,  w,  h,--scale);
    
  }
}

void recursiveEllipse(int x, int y, int w, int h, int scale){
  //me too
}

//BONUS
void recursiveTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int scale){
  //Complete me if you dare!
}

